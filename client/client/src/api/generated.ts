/**
 * Generated by orval v7.13.0 🍺
 * Do not edit manually.
 * Hub API Documentation
 * Production-ready backend for a Google Meet-like video conferencing application
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface Error {
  type?: string;
  title?: string;
  detail?: string;
  status?: number;
}

export interface UserResponse {
  id?: string;
  email?: string;
  displayName?: string;
  avatarUrl?: string;
  createdAt?: string;
  updatedAt?: string;
}

export interface MeetingResponse {
  id?: string;
  code?: string;
  title?: string;
  hostId?: string;
  scheduledAt?: string;
  createdAt?: string;
  isActive?: boolean;
}

export interface TokensResponse {
  accessToken?: string;
  refreshToken?: string;
  accessTokenExpiresIn?: number;
  refreshTokenExpiresIn?: number;
}

export type Get200 = {
  success?: boolean;
  message?: string;
  version?: string;
  timestamp?: string;
  docs?: string;
  swagger?: string;
};

export type PostV1AuthRegisterBody = {
  email: string;
  /** @minLength 8 */
  password: string;
  /**
   * @minLength 1
   * @maxLength 255
   */
  displayName: string;
};

export type PostV1AuthRegister201 = {
  accessToken?: string;
  refreshToken?: string;
  accessTokenExpiresIn?: number;
  refreshTokenExpiresIn?: number;
};

export type PostV1AuthLoginBody = {
  email: string;
  password: string;
};

export type PostV1AuthLogin200 = {
  accessToken?: string;
  refreshToken?: string;
  accessTokenExpiresIn?: number;
  refreshTokenExpiresIn?: number;
};

export type PostV1AuthOauthGoogleBody = {
  idToken: string;
};

export type PostV1AuthRefreshBody = {
  refreshToken?: string;
};

export type PostV1MeetingsBody = {
  /** @maxLength 255 */
  title?: string;
  scheduledAt?: string;
};

export type GetV1MeetingsParams = {
/**
 * Filter to show only upcoming meetings
 */
upcoming?: boolean;
/**
 * Maximum number of meetings to return
 * @minimum 1
 * @maximum 100
 */
limit?: number;
};

export type PostV1MeetingsResolveCodeBody = {
  /** @pattern ^[a-z]{3}-[a-z]{4}-[a-z]{3}$ */
  code: string;
};

export type PostV1MeetingsIdRoomTokenBody = {
  allowGuest?: boolean;
  displayName?: string;
};

export type PostV1MeetingsIdInvitesBodyRole = typeof PostV1MeetingsIdInvitesBodyRole[keyof typeof PostV1MeetingsIdInvitesBodyRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PostV1MeetingsIdInvitesBodyRole = {
  guest: 'guest',
  cohost: 'cohost',
} as const;

export type PostV1MeetingsIdInvitesBody = {
  email: string;
  role: PostV1MeetingsIdInvitesBodyRole;
};

export type PatchV1MeBody = {
  /**
   * @minLength 1
   * @maxLength 255
   */
  displayName?: string;
  avatarUrl?: string;
};

export const getHubAPIDocumentation = () => {
/**
 * Check if the API is running
 * @summary API Status
 */
const get = <TData = AxiosResponse<Get200>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/`,options
    );
  }

/**
 * Create a new user account with email and password
 * @summary Register a new user
 */
const postV1AuthRegister = <TData = AxiosResponse<PostV1AuthRegister201>>(
    postV1AuthRegisterBody: PostV1AuthRegisterBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/auth/register`,
      postV1AuthRegisterBody,options
    );
  }

/**
 * Authenticate user and return access and refresh tokens
 * @summary Login with email and password
 */
const postV1AuthLogin = <TData = AxiosResponse<PostV1AuthLogin200>>(
    postV1AuthLoginBody: PostV1AuthLoginBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/auth/login`,
      postV1AuthLoginBody,options
    );
  }

/**
 * Authenticate user using Google OAuth ID token
 * @summary OAuth login with Google
 */
const postV1AuthOauthGoogle = <TData = AxiosResponse<void>>(
    postV1AuthOauthGoogleBody: PostV1AuthOauthGoogleBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/auth/oauth/google`,
      postV1AuthOauthGoogleBody,options
    );
  }

/**
 * Get a new access token using refresh token
 * @summary Refresh access token
 */
const postV1AuthRefresh = <TData = AxiosResponse<void>>(
    postV1AuthRefreshBody: PostV1AuthRefreshBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/auth/refresh`,
      postV1AuthRefreshBody,options
    );
  }

/**
 * Invalidate the current refresh token
 * @summary Logout user
 */
const postV1AuthLogout = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/auth/logout`,undefined,options
    );
  }

/**
 * Get the profile information of the currently authenticated user
 * @summary Get current user
 */
const getV1AuthMe = <TData = AxiosResponse<void>>(
     options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/v1/auth/me`,options
    );
  }

/**
 * Create a new meeting with a unique code and set the creator as host
 * @summary Create a new meeting
 */
const postV1Meetings = <TData = AxiosResponse<void>>(
    postV1MeetingsBody: PostV1MeetingsBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/meetings/`,
      postV1MeetingsBody,options
    );
  }

/**
 * Get meetings where the authenticated user is host or participant
 * @summary List user meetings
 */
const getV1Meetings = <TData = AxiosResponse<void>>(
    params?: GetV1MeetingsParams, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/v1/meetings/`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }

/**
 * Get detailed information about a specific meeting
 * @summary Get meeting details
 */
const getV1MeetingsId = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/v1/meetings/${id}`,options
    );
  }

/**
 * Convert a meeting code to the corresponding meeting ID
 * @summary Resolve meeting code
 */
const postV1MeetingsResolveCode = <TData = AxiosResponse<void>>(
    postV1MeetingsResolveCodeBody: PostV1MeetingsResolveCodeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/meetings/resolve-code`,
      postV1MeetingsResolveCodeBody,options
    );
  }

/**
 * Generate a short-lived JWT token for joining the meeting room
 * @summary Get room token
 */
const postV1MeetingsIdRoomToken = <TData = AxiosResponse<void>>(
    id: string,
    postV1MeetingsIdRoomTokenBody: PostV1MeetingsIdRoomTokenBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/meetings/${id}/room-token`,
      postV1MeetingsIdRoomTokenBody,options
    );
  }

/**
 * Send an invitation to a user to join the meeting
 * @summary Create meeting invite
 */
const postV1MeetingsIdInvites = <TData = AxiosResponse<void>>(
    id: string,
    postV1MeetingsIdInvitesBody: PostV1MeetingsIdInvitesBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/meetings/${id}/invites`,
      postV1MeetingsIdInvitesBody,options
    );
  }

/**
 * Retrieve all pending and processed invitations for a specific meeting
 * @summary List meeting invites
 */
const getV1MeetingsIdInvites = <TData = AxiosResponse<void>>(
    id: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/v1/meetings/${id}/invites`,options
    );
  }

/**
 * Accept a pending meeting invitation
 * @summary Accept invite
 */
const postV1InvitesInviteIdAccept = <TData = AxiosResponse<void>>(
    inviteId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/invites/${inviteId}/accept`,undefined,options
    );
  }

/**
 * Decline a pending meeting invitation
 * @summary Decline invite
 */
const postV1InvitesInviteIdDecline = <TData = AxiosResponse<void>>(
    inviteId: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/v1/invites/${inviteId}/decline`,undefined,options
    );
  }

/**
 * Update the profile information of the currently authenticated user
 * @summary Update profile
 */
const patchV1Me = <TData = AxiosResponse<void>>(
    patchV1MeBody: PatchV1MeBody, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.patch(
      `/v1/me`,
      patchV1MeBody,options
    );
  }

return {get,postV1AuthRegister,postV1AuthLogin,postV1AuthOauthGoogle,postV1AuthRefresh,postV1AuthLogout,getV1AuthMe,postV1Meetings,getV1Meetings,getV1MeetingsId,postV1MeetingsResolveCode,postV1MeetingsIdRoomToken,postV1MeetingsIdInvites,getV1MeetingsIdInvites,postV1InvitesInviteIdAccept,postV1InvitesInviteIdDecline,patchV1Me}};
export type GetResult = AxiosResponse<Get200>
export type PostV1AuthRegisterResult = AxiosResponse<PostV1AuthRegister201>
export type PostV1AuthLoginResult = AxiosResponse<PostV1AuthLogin200>
export type PostV1AuthOauthGoogleResult = AxiosResponse<void>
export type PostV1AuthRefreshResult = AxiosResponse<void>
export type PostV1AuthLogoutResult = AxiosResponse<void>
export type GetV1AuthMeResult = AxiosResponse<void>
export type PostV1MeetingsResult = AxiosResponse<void>
export type GetV1MeetingsResult = AxiosResponse<void>
export type GetV1MeetingsIdResult = AxiosResponse<void>
export type PostV1MeetingsResolveCodeResult = AxiosResponse<void>
export type PostV1MeetingsIdRoomTokenResult = AxiosResponse<void>
export type PostV1MeetingsIdInvitesResult = AxiosResponse<void>
export type GetV1MeetingsIdInvitesResult = AxiosResponse<void>
export type PostV1InvitesInviteIdAcceptResult = AxiosResponse<void>
export type PostV1InvitesInviteIdDeclineResult = AxiosResponse<void>
export type PatchV1MeResult = AxiosResponse<void>
